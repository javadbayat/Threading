<package>
    <job id="RunJSThread">
        <script language="JScript">
            // Taking a look at this code still reminds me of Omegastripes's post on Stack Overflow,
            // which illustrated how to use WSH VBS to dynamically create an HTA window, and receive
            // its window object through a Web Browser Control. Here is its link:
            // https://stackoverflow.com/questions/47100085/creating-multi-select-list-box-in-vbscript/47111556#47111556
            // Thanks a lot to his post, I used a similar mechanism in this component to
            // transfer thread data (like the thread template element, the extra parameter,
            // the thread flags, .etc) from the mshta.exe process (The HTA process) to the
            // wscript.exe process (the underlying process of the thread) via a dedicated
            // Web Browser Control (WBC). Ha ha!

            eval((function () {
                var TF_SUSPENDED        = 1;
                var TF_BREAK_FROM_BEG   = 4;
                var TF_HAS_RESOURCES    = 8;
    
                var TEM_EXEC_HALTED     = 1;
                
                var e = new Enumerator(WSH.Arguments);
                if (e.atEnd())
                    throw new Error("Not enough arguments");
    
                // Begin the rendezvous operation.
                var signature = "OmegaStripes_" + e.item();
                var wins = WSH.CreateObject("Shell.Application").Windows();
                var threadsInfo;
    
                for (var i = 0; i < wins.Count; i++)
                {
                    var win = wins.Item(i);
                    if (win)
                    {
                        threadsInfo = win.GetProperty(signature);
                        if (threadsInfo)
                        {
                            win.RegisterAsBrowser = false;
                            break;
                        }
                    }
                }
    
                if (!threadsInfo)
                    throw new Error("The property '" + signature + "' does not exist in any windows.");
                
                e.moveNext();
                if (e.atEnd())
                    throw new Error("Not enough arguments");
    
                var tmid = Number(e.item());
                thread = threadsInfo(tmid);
                // The rendezvous is over; now we have the thread object stored in the `thread` variable.
                tparam = thread.arg;
                window = thread.element.document.parentWindow;
                extern = new Function("for (var i = 0; i < arguments.length; i++) this[arguments[i]] = window[arguments[i]];");
                importWSC = new Function("scriptlet", "componentID", "return GetObject('script:' + (threadc.fso.GetAbsolutePathName(scriptlet)) + (componentID ? '#' + componentID : ''));");
    
                thread.script = this;
    
                if (thread.flags & TF_HAS_RESOURCES)
                    thread.transferResources();
    
                threadc = {suspend:function() {
                    thread.flags |= TF_SUSPENDED;
                    do
                        WSH.Sleep(1000);
                    while (thread.flags & TF_SUSPENDED)
                }, exit:function(exitCode) {
                    thread.indicateExit(TEM_EXEC_HALTED);
                    WSH.Quit(exitCode);
                }, sleep:function(t) {
                    if (t != Infinity)
                        WSH.Sleep(t);
                    else
                        while (1)
                            WSH.Sleep(60000);        
                }, hostFullName:WSH.ScriptFullName, hostVersion:"1.0",
                wshShell:WSH.CreateObject("WScript.Shell"),
                fso:WSH.CreateObject("Scripting.FileSystemObject")};
                
                if (thread.cd)
                    threadc.wshShell.CurrentDirectory = thread.cd;
    
                if (thread.flags & TF_SUSPENDED)
                    threadc.suspend();
    
                return ((thread.flags & TF_BREAK_FROM_BEG) ? "debugger;\r\n" : "") +
                        thread.element.innerHTML;
            })());

            thread.indicateExit();
        </script>
    </job>
    <job id="RunVBSThread">
        <script language="JScript">
            // Taking a look at this code still reminds me of Omegastripes's post on Stack Overflow,
            // which illustrated how to use WSH VBS to dynamically create an HTA window, and receive
            // its window object through a Web Browser Control. Here is its link:
            // https://stackoverflow.com/questions/47100085/creating-multi-select-list-box-in-vbscript/47111556#47111556
            // Thanks a lot to his post, I used a similar mechanism in this component to
            // transfer thread data (like the thread template element, the extra parameter,
            // the thread flags, .etc) from the mshta.exe process (The HTA process) to the
            // wscript.exe process (the underlying process of the thread) via a dedicated
            // Web Browser Control (WBC). Ha ha!

            (function() {
                var TF_SUSPENDED        = 1;
                var TF_HAS_RESOURCES    = 8;
    
                var TEM_EXEC_HALTED     = 1;
    
                var e = new Enumerator(WSH.Arguments);
                if (e.atEnd())
                    throw new Error("Not enough arguments");
                
                // Begin the rendezvous operation.
                var signature = "OmegaStripes_" + e.item();
                var wins = WSH.CreateObject("Shell.Application").Windows();
                var threadsInfo;
    
                for (var i = 0; i < wins.Count; i++)
                {
                    var win = wins.Item(i);
                    if (win)
                    {
                        threadsInfo = win.GetProperty(signature);
                        if (threadsInfo)
                        {
                            win.RegisterAsBrowser = false;
                            break;
                        }
                    }
                }
    
                if (!threadsInfo)
                    throw new Error("The property '" + signature + "' does not exist in any windows.");
    
                e.moveNext();
                if (e.atEnd())
                    throw new Error("Not enough arguments");
    
                var tmid = Number(e.item());
                thread = threadsInfo(tmid);
                // The rendezvous is over; now we have the thread object stored in the `thread` variable.
                tparam = thread.arg;
                window = thread.element.document.parentWindow;
                extern = new Function("for (var i = 0; i < arguments.length; i++) this[arguments[i]] = window[arguments[i]];");
                importWSC = new Function("scriptlet", "componentID", "return GetObject('script:' + (threadc.fso.GetAbsolutePathName(scriptlet)) + (componentID ? '#' + componentID : ''));");
                
                thread.script = this;
    
                if (thread.flags & TF_HAS_RESOURCES)
                    thread.transferResources();
                
                threadc = {suspend:function() {
                    thread.flags |= TF_SUSPENDED;
                    do
                        WSH.Sleep(1000);
                    while (thread.flags & TF_SUSPENDED)
                }, exit:function(exitCode) {
                    thread.indicateExit(TEM_EXEC_HALTED);
                    WSH.Quit(exitCode);
                }, sleep:function(t) {
                    if (t != Infinity)
                        WSH.Sleep(t);
                    else
                        while (1)
                            WSH.Sleep(60000);
                }, hostFullName:WSH.ScriptFullName, hostVersion:"1.0",
                wshShell:WSH.CreateObject("WScript.Shell"),
                fso:WSH.CreateObject("Scripting.FileSystemObject")};
                
                if (thread.cd)
                    threadc.wshShell.CurrentDirectory = thread.cd;
    
                if (thread.flags & TF_SUSPENDED)
                    threadc.suspend();
            })();
        </script>
        <script language="VBScript">
            If (thread.flags And 4) = 0 Then
                Execute thread.element.innerHTML
            Else
                Execute "Stop" & VbCrLf & thread.element.innerHTML
            End If
            
            thread.indicateExit
        </script>
    </job>
</package>